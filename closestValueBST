# Avg TC: O(logn) | SC: O(1)
# Worst TC: O(n) | SC: O(1)
# Iterative solution
def findClosestValueInBst(tree, target):
    return helper(tree, target, float('inf'))

def helper(tree, target, closest):
    currNode = tree
    while currNode is not None:
        if abs(target - closest) > abs(target - currNode.value):
            closest = currNode.value
        if target > currNode.value:
            currNode = currNode.right
        elif target < currNode.value:
            currNode = currNode.left
        else:
            break
    return closest

# This is the class of the input tree. Do not edit.
class BST:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

# Avg TC: O(log n) | SC: O(n)
# Worst TC: O(n) | SC: O(n) # When the branch is really long

# Recursive solution
def findClosestValueInBst(tree, target):
    return helper(tree, target, float("inf"))

def helper(tree, target, closest):
    # base case
    if tree is None:
        return closest
    if abs(target - closest) > abs(target - tree.value):
        closest = tree.value
    if target > tree.value:
        return helper(tree.right, target, closest)
    if target < tree.value:
        return helper(tree.left, target, closest)
    else:
        return closest

# This is the class of the input tree. Do not edit.
class BST:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

# Time complexity: O(n)
def longestPeak(array):
	long_peak = 0
	i = 1
	while i < len(array) - 1:
		isPeak = array[i-1] < array[i] and array[i] > array[i+1]
		if not isPeak:
			i += 1
			continue
		left_idx = i - 2
		right_idx = i + 2
		# We check if the numbers are strictly decreasing on the left of the peak
		while left_idx >= 0 and array[left_idx] < array[left_idx + 1]:
			left_idx -= 1
		# We check if the numbers are strictly decreasing on the right of the peak
		while right_idx < len(array) and array[right_idx] < array[right_idx - 1]:
			right_idx += 1
		
		curr_peak_len = right_idx - left_idx - 1
		long_peak = max(curr_peak_len, long_peak)
		i = right_idx
	return long_peak
